▶ Git Tags
※ https://git-scm.com/docs/git-tag
Tags are pointers that refer to "particular points in Git history"
We can mark a particular moment in time with a tag
Tags are most often used to "mark version releases" in projects (v4.1.0, v4.1.1, etc.)
Think of tags as "branch references" that do NOT CHANGE
★ Once a tag is created, it always refers to the same commit
It's just a label for a commit

● There are two types of Git tags we can use
1) lightweight tags
   They are just a name/label that points to a particular commit
2) annotated tags
   store extra meta data including
   the author's name and email, the date, and a tagging message
   (like a commit message)

------------------------------------------------------------------------------------------

▶ Semantic Versioning Spec : <Major-Release>.<Minor-Release>.<Patch-Release>
※ https://semver.org/
It outlines a standardized versioning system for software releases
It provides a consistent way for developers to give meaning to their software releases
(how big of a change is this release??)
Versions consist of three numbers separated by periods

※ Bootstrap Releases : https://getbootstrap.com/docs/versions/
※ React Releases : https://reactjs.org/versions/

● Initial Release
Typically, the first release is 1.0.0

● Patch Release : 1.0.1
Patch releases normally do not contain new features or significant changes
They typically signify bug fixes and other changes that do not impact how the code is used

● Minor Release : 1.1.0
Minor releases signify that new features or functionality have been added,
but the project is still backwards compatible
No breaking changes
The new functionality is optional and should not force users to rewrite their own code

● Major Release : 2.0.0
Major releases signify significant changes that is no longer backwards compatible
Features may be removed or changed substantially

------------------------------------------------------------------------------------------

▶ Viewing & Searching Tags : git tag
It will print a list of all the tags in the current repository

$ git tag
-> 'q' to get out

● git tag -l "wildcard pattern"
Search for tags that match a particular pattern

$ git tag -l "*beta*"
-> Print a list of tags that include "beta" in their name

------------------------------------------------------------------------------------------

▶ Comparing Tags with Git Diff

● Checking Out Tags : git checkout <tag>
To view the state of a repo at a particular tag
This puts us in detached HEAD!

$ git checkout 15.3.1
-> We can make a branch based on this commit

$ git switch -c tagBranch
$ git tag

● Compare 2 different tags
$ git diff v17.0.0 v17.0.1

------------------------------------------------------------------------------------------

▶ Create Lightweight Tags : git tag <tagname>
By default, Git will create the tag referring to the commit that HEAD is referencing

● Edit the file 'README.md'
$ git add README.md
$ git commit -m "fix typo in README"

● Create git tag
$ git tag v17.0.2

● Check the new git tag
$ git tag

● Edit the file 'README.md'
$ git commit -am "update README"
$ git log --oneline

● Create git tag
$ git tag v17.0.3

● Compare two tags
$ git diff v17.0.2..v17.0.3

------------------------------------------------------------------------------------------

▶ Create Annotated Tags : git tag -a <tagname>
Git will open your default text editor and prompt you for additional information
★ Similar to git commit, we can also use the "-m" option to pass a message directly
   and forgo the opening of the text editor

● Create and edit the file 'newFeature.txt'
$ git add newFeature.txt
$ git commit -m "add newfeature"

● Create git tag
$ git tag -a v17.1.0
-> VSCode pops up
   You can write additional details if you want to

▶ See metadata of tag : git show <tagname>
$ git show v17.1.0

------------------------------------------------------------------------------------------

▶ Tagging Previous Commits : git tag <tagname> <commit-hash>
So far we've seen how to tag the commit that HEAD references
We can also tag an older commit by providing the commit hash

$ git tag mytag 67e84982

● Check the new git tag
$ git tag
$ git log --oneline

------------------------------------------------------------------------------------------

▶ Replacing Tags with Force : git tag -f <tagname>
Git will yell at us if we try to reuse a tag that is already referring to a commit
If we use the -f option, we can FORCE our tag through

$ git log --oneline
$ git tag v17.0.3 696e736be
result : fatal: tag 'v17.0.3' already exists
-> ★ tag name should be unique
 
● Use the same name by forcing
$ git tag v17.0.3 696e736be -f 
result : Updated tag 'v17.0.3' (was 07027f93e)

● Check the git tag
$ git log --oneline

------------------------------------------------------------------------------------------

▶ Deleting Tags : git tag -d <tagname>

$ git tag deleteMe
$ git log --oneline

$ git tag -d deleteMe
$ git log --oneline

------------------------------------------------------------------------------------------

▶ Pushing Tags : git push <remote-name> --tags
By default, the git push command doesn’t transfer tags to remote servers (Github)
If you have a lot of tags that you want to push up at once,
you can use the "--tags" option to the git push command
This will transfer "all of your tags" to the remote server that are not already there

● Push each tag
$ git tag
$ git push origin mytag

● Push all tags
$ git push origin -- tags

