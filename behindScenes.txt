▶ Git Behind the Scenes

$ ls .git
result : COMMIT_EDITMSG  ORIG_HEAD  description  index  logs/     packed-refs
         HEAD            config     hooks/       info/  objects/  refs/

------------------------------------------------------------------------------------------

▶ Config File
※ https://git-scm.com/docs/git-config
The config file is for configuration
We've seen how to configure global settings like our name and email across all Git repos,
but we can also configure things on a per-repo basis

● Global setting
$ git config user.name

● Local setting
$ git config --local user.name "chicken"
$ git config --local user.name
result : chicken

$ git config --local user.email "chicken.gmail.com"

★ By editing config file,
   you can change settings (color, font, etc.) in "Git bash"
   Have fun!

$ ls .git/
$ code config

result
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[user]
	name = reasonmii

※ C:\Users\User\Desktop\RoadtripPlaylist\.git

------------------------------------------------------------------------------------------

▶ Refs Folder
Inside of refs, you'll find a heads directory
1) refs/heads contains "one file per branch" in a repository
   Each file is named after a branch and contains the "hash" of the commit at the tip of the branch
   ex) refs/heads/master contains the commit hash of the last commit on the master branch
2) refs/tags contains "one file for each tag" in the repo

$ ls .git/refs
result : heads/  tags/

$ ls .git/refs/heads
result : 2000s  chicken  emptyplaylist  georges  master  newbranch  oldies
-> All branches' name in this repository

------------------------------------------------------------------------------------------

▶ HEAD
HEAD is just a text file that keeps "track of where HEAD points"
If it contains refs/heads/master, this means that HEAD is pointing to the master branch
In "detached HEAD", the HEAD file contains a "commit hash" instead of a branch reference

$ ls .git
HEAD file : refs: refs/heads/master

$ git switch chicken
HEAD file : refs: refs/heads/chicken
-> When we switch the branch, it is now pointing the changed branch

------------------------------------------------------------------------------------------

▶ Index
The index file is a binary file that contains a list of the files the repository is tracking
It stores the file names as well as some metadata for each file
Not that the index does NOT store the actual contents of files
It only contains references to files

------------------------------------------------------------------------------------------

▶ Objects Folder
The objects directory contains all the repo files
This is where Git stores the backups of files, the commits in a repo, and more
The files are all compressed and encrypted, so they won't look like much!

------------------------------------------------------------------------------------------

▶ Hashing Functions
They are functions that map input data of some arbitrary size
to fixed-size output values
ex) S -> 02aa629c8b16cd17a44f3a0efec2feed43937642

● Cryptographic Hash Functions
1) One-way function which is infeasible to invert
2) Small change in input yields large change in the output
3) Deterministic - same input yields same output
4) Unlikely to find 2 outputs with same value = unique

● SHA-1
※ https://linkgod.github.io/SHA-1/
Git uses a hashing function called SHA-1 
though this is set to change eventually)
- SHA-1 always generates "40-digit" hexadecimal numbers
- The commit hashes we've seen a million times are the output of SHA-1

● Git Database
Git is a "key-value" data store
We can insert any kind of content into a Git repository,
and Git will hand us back a unique key we can later use to retrieve that content
These keys that we get back are "SHA-1 checksums"

------------------------------------------------------------------------------------------

▶ Let's Try Hash : git hash-object <file>
※ https://git-scm.com/docs/git-hash-object
It takes some data, stores in in our ".git/objects" directory
and gives us back the unique SHA-1 hash that refers to that data object
In this simplest form, Git simply takes some content
and returns the unique key that would be used to store our object
But it does not actually store anything

● echo 'hello' | git hash-object --stdin
The "--stdin" option tells git hash-object to use the content
from stdin rather than a file
In this example, it will hash the word 'hello'
★ The "echo" command simply repeats whatever we tell it to repeat to the terminal
We pipe the output of echo to git hash-object.

$ echo "hi"
result : hi

$ echo "hi" | git hash-object --stdin
45b983be36b73c0788dc9cbcb76cbb80fc7bb057

$ echo "hi" | git hash-object --stdin
45b983be36b73c0788dc9cbcb76cbb80fc7bb057
-> ★ Deterministic : Always output the same value fromt he input 'hi'

● echo 'hello' | git hash-object --stdin -w
Rather than simply outputting the key that git would store our object under,
we can use the "-w" option to tell git to "actually write" the object to the database
After running this command, check out the contents of .git/objects

$ echo "hi" | git hash-object --stdin -w
45b983be36b73c0788dc9cbcb76cbb80fc7bb057

※ C:\Users\User\Desktop\RoadtripPlaylist\.git\objects
When you check here, the new folder is created : '45'
- Click the folder
- There's a file called 'b983be36b73c0788dc9cbcb76cbb80fc7bb057'
-> 45 + b983be36b73c0788dc9cbcb76cbb80fc7bb057 = 'hi'

$ echo "goodbye" | git hash-object --stdin -w
dd7e1c6f0fefe118f0b63d9f10908c460aa317a6

------------------------------------------------------------------------------------------

▶ Retrieving Data : git cat-file -p <object-hash>
※ https://git-scm.com/docs/git-cat-file
Now that we have data stored in our Git object database,
we can try retrieving it using the git cat-file command
The "-p" option tells Git to pretty print the contents of the object based on its type

$ git cat-file -p 45b983be36b73c0788dc9cbcb76cbb80fc7bb057
result : hi

$ git cat-file -p dd7e1
result : goodbye


● Create a new file
$ touch dogs.txt
$ code .

● Edit the file and check the edited file
$ cat dogs.txt
result : rusty
-> The content of 'dogs.txt'

● Check the hash of the file
$ git hash-object dogs.txt
result : c0d1310bb66b44c620b4be358ed6fa3fe2e34701

$ git hash-object dogs.txt -w
result : c0d1310bb66b44c620b4be358ed6fa3fe2e34701

● Check the folder
C:\Users\User\Desktop\RoadtripPlaylist\.git\objects
- New folder is created : 'c0'
- Click the folder
- There's a file called 'd1310bb66b44c620b4be358ed6fa3fe2e34701'

● Edit the file 'dogs.txt'
$ git hash-object dogs.txt
result : a55e67849e8aad239d76388bbac3df9e0feacf44
-> ★ because things are changed, the hash is changed
   Small input changes produce big output changes

$ git hash-object dogs.txt -w
result : a55e67849e8aad239d76388bbac3df9e0feacf44

● Check the content of the file
$ git cat-file -p a55e678
result : Rusty
         Wyatt
         Cheyenne
         Sirius

● Restore the file
Delete all texts in 'dogs.txt' file
$ git cat-file -p a55e678 > dogs.txt
-> Texts are restored

★ Using hash, we can travel wherever we want to

------------------------------------------------------------------------------------------

▶ Blobs (binary large object)
Git blobs are the object type Git uses to store the contents of "files" in a given repository
Blobs don't even include the filenames of each file or any other data
They just store the "contents" of a file!

● Each Blob gets its own hash
It's not a commit hash, but a blob hash

$ git hash-object dogs.txt -w
result : a55e67849e8aad239d76388bbac3df9e0feacf44

● Content of the Blob
//main game code
console.log("hello world!");

//more code
for (let i = 0; i < 10; i++) {
        console.log("OINK");
}

------------------------------------------------------------------------------------------

▶ Trees
Trees are Git objects used to store the contents of a "directory"
Each tree contains "pointers" that can refer to blobs and to other trees
Each entry in a tree contains the SHA-1 hash of a blob or tree,
as well as the mode, type, and filename

● git cat-file -p master^{tree}
Remember that "git cat-file" prints out Git objects
In this example, the "master^{tree}" syntax specifies the tree object
that is pointed to by the tip of our master branch
-> This just gives us the most recent tree

$ git cat-file -p master^{tree}
result : 100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    chicken.txt
         100644 blob 4157c4192241bb500949073440787b5f33970c8a    playlist.txt
-> It prints tree/blob, hash, name of the file

$ git cat-file -p 4157c419224
result : SONG - ARTIST
         ==============
         <<<<<<< HEAD
         SOS - ABBA
         ONE OF US - ABBA
         HE STOPPED LOVING HER TODAY - GEORGE JONES
         <<<<<<< HEAD
         THE RACE IS ON - GEORGE
         =======
         THE RACE IS ON - GEORGE JONES
         My Sweet Lord - ABC
         What is Life - ABC
         Disney
         >>>>>>> oldies
         =======
         >>>>>>> chicken
-> result : All texts in 'playlist.txt' file

● Retrieve the type of the object
$ git cat-file -t 4157c419224
result : blob

$ git cat-file -t 5c40176f0
result : tree

------------------------------------------------------------------------------------------

▶ Commits
Commit objects combine a tree object along with information
about the context that led to the current tree
★ Commits store a reference to parent commit(s), the author, the commiter,
   and of course the commit message!

When we run git commit,
Git creates a new commit object whose parent is the current HEAD commit
and whose tree is the current content of the index.

● Edit the file 'dogs.txt'
$ git add dogs.txt
$ git commit -m "inital commit"
$ git log --oneline
result : ce16d83 (HEAD -> master) inital commit
         e3982a7 final change
         e3b17a0 change
         20b5f7e save changes
         12fcaa4 add one more disney

● Check the type of the commit's hash
$ git cat-file -t ce16d83
result : commit

$ git cat-file -p ce16d83
result : tree a693166528a603e951572ca313ad4e4f33d2b974
         parent e3982a75b29dc5e1a338be19243acba5bbcc0e44
         author reasonmii <cdyn17@gmail.com> 1627535951 +0900
         committer reasonmii <cdyn17@gmail.com> 1627535951 +0900
         inital commit
-> Every commit is related to tree
   So, we've got a tree's hash

● Check the type of the resulted tree's hash
$ git cat-file -t a693166528a60
result : tree

● Check what's in the tree
$ git cat-file -p a693166528a60
result : 100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    chicken.txt
         100644 blob 87316290a7aaaf9c5c4ad5a7596b8371de3a8314    dogs.txt
         100644 blob 4157c4192241bb500949073440787b5f33970c8a    playlist.txt

● Create a file with contents
$ echo "meow meow" > cats.txt
$ cat cats.txt
result : meow meow

$ git add cats.txt
$ git commit -m "add cats file"
$ git log --oneline
result : 63b5e16 (HEAD -> master) add cats file
         ce16d83 inital commit
         e3982a7 final change
         e3b17a0 change
         20b5f7e save changes
         12fcaa4 add one more disney

● Check the type of the commit's hash
$ git cat-file -t 63b5e16
result : commit

$ git cat-file -p 63b5e16
result : tree 743abb88559b2929848bd05bad712c0f76561e82
         parent ce16d8351e4511ab37387473f5dc0e142efdf3ae
         author reasonmii <cdyn17@gmail.com> 1627536233 +0900
         committer reasonmii <cdyn17@gmail.com> 1627536233 +0900
         add cats file

● Check what's in the tree
$ git cat-file -p 743abb8855
result : 100644 blob 6f6b544d1a3605ed85b3645784e2773e3564fc25    cats.txt
         100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    chicken.txt
         100644 blob 87316290a7aaaf9c5c4ad5a7596b8371de3a8314    dogs.txt
         100644 blob 4157c4192241bb500949073440787b5f33970c8a    playlist.txt
-> Hash of 'dogs.txt' is the same as before, because it's not changed (deterministic)

● Edit the file 'dogs.txt'
$ git add dogs.txt
$ git commit -m "update dogs file"

$ git log --oneline
result : 426bf0f (HEAD -> master) update dogs file
         63b5e16 add cats file
         ce16d83 inital commit
         e3982a7 final change
         e3b17a0 change
         20b5f7e save changes
         12fcaa4 add one more disney

$ git cat-file -p 426bf0f
result : tree bd5e4e36a2beb2d3db3953e6f0eda4837e3c853e
         parent 63b5e1656885f59ad235eadda8745a34a4e31ccf
         author reasonmii <cdyn17@gmail.com> 1627536433 +0900
         committer reasonmii <cdyn17@gmail.com> 1627536433 +0900
         update dogs file

$ git cat-file -p bd5e4e36a
result : 100644 blob 6f6b544d1a3605ed85b3645784e2773e3564fc25    cats.txt
         100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    chicken.txt
         100644 blob 1ef145211bab866d74a0330b559e2783c5b3fcf7    dogs.txt
         100644 blob 4157c4192241bb500949073440787b5f33970c8a    playlist.txt
-> Since 'dogs.txt' is edited, it has new hash

