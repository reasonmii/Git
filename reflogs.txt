
▶ Reflogs
※ https://git-scm.com/docs/git-reflog
Git keeps a record of when the tips of branches
and other references were updated in the repo
We can view and update these reference logs using the git reflog command

● Check the 'HEAD' file in .git\logs
ex) C:\Users\User\Desktop\RoadtripPlaylist\.git\logs
-> This is the log which tracks the moves of the head reference
   Whenever you switch branches, it record the log

▶ Limitations of Reflogs
Git only keeps reflogs on your local activity
They are not shared with collaborators
Reflogs also expire
Git cleans out old entries after around 90 days,
though this can be configured

------------------------------------------------------------------------------------------

▶ Git Reflog Show Command : git reflog show HEAD
The git reflog command accepts subcommands "show, expire, delete, and exists"
★ Show is the only commonly used variant, and it is the default subcommand
"git reflog show" will show the log of a specific reference (it defaults to HEAD)
ex) git reflog show main
    -> View the logs for the tip of the main branch

● Check reflog of 'HEAD'
$ git reflog show HEAD
-> It keeps every single change during 90 days
※ HEAD@{0} : Most recent HEAD

$ git log --oneline
-> It only shows clear histories (not all)

$ git switch oldies
$ git reflog show HEAD
-> HEAD@{0} is changed

● Check reflog of other branches
$ git reflog show newbranch
result : 31e854b (newbranch, 2000s) newbranch@{0}: branch: Created from HEAD

$ git reflog show chicken
result : 263d626 (emptyplaylist, chicken) chicken@{0}: branch: Created from HEAD

● Create new file in the branch
$ echo "haha" > haha.txt
$ git add haha.txt
$ git commit -m "add haha"

$ git log --oneline
result : 686f12b (HEAD -> oldies) add haha
         579f585 Add 2 wings songs
         12fcaa4 add one more disney
         e8f30cd add two songs more
         0ffa947 add two George Jones songs
         4739181 add two ABBA songs
         44342c7 add playlist header

$ git reflog show oldies
result : 686f12b (HEAD -> oldies) oldies@{0}: commit: add haha
         579f585 oldies@{1}: commit: Add 2 wings songs
         12fcaa4 oldies@{2}: commit: add one more disney
         e8f30cd oldies@{3}: commit: add two songs more
         0ffa947 oldies@{4}: commit: add two George Jones songs
         4739181 oldies@{5}: branch: Created from master
-> Last commmit 'add haha' is updated

------------------------------------------------------------------------------------------

▶ Reflog Reference : name@{qualifier}
We can access specific git refs with this code
We can use this syntax to access specific ref pointers
and can pass them to other commands including checkout, reset, and merge

$ git reflog show HEAD@{10}
-> The result starts from HEAD@{10}, not HEAD@{0}

● Compare differences
$ git diff HEAD@{0} HEAD@{5}

------------------------------------------------------------------------------------------

▶ Timed References
Every entry in the reference logs has a "timestamp" associated with it
We can filter reflogs entries by time/date by using time qualifiers like:
- 1.day.ago
- 3.minutes.ago
- yesterday
- Fri, 12 Feb 2021 14:06:21 -0800
★ Remember, we can't go back more than 90 days

method1) $ git reflog master@{one.wek.ago}
method2) $ git checkout master@{2.days.ago}
method3) $ git diff main@{0} main@{yesterday}

$ git log --oneline
$ git diff HEAD HEAD@{yesterday}
$ git diff master master@{yesterday}

$ git reflog show HEAD@{2.days.ago}
$ git reflog show HEAD@{two.days.ago}
$ git reflog show HEAD@{one.minute.ago}

------------------------------------------------------------------------------------------

▶ Reflogs Rescue
We can sometimes use reflog entries to access commits
that seem lost and are not appearing in git log
★ This only works on local changes

● Delete the commit
$ git reset --hard db727ba

● Even though you want to restore the commit, it's not here
$ git log --oneline

● Restore the commit
$ git reflog show master
$ git reset --hard master@{1}
$ git log --oneline
-> We get the hash and the commit message back

------------------------------------------------------------------------------------------

▶ Undoing a Rebase w/ Reflog

● Check which commits to merge
$ git log --oneline
$ git rebase -i HEAD~4
-> VSCode is opened
   Replace 'pick' to 'fixup' to rewrite the history

● Check the change
$ git log --oneline

● Check the commit you want to edit the message
$ git rebase -i HEAD~2
-> VSCode is opened
   Replace 'pick' to 'reword'
   Edit commit message

● Check the change
$ git log --oneline
-> It has very clean history
   All history before merging commits or editing message of commit is gone

● Suppose you want to go back and see the history which is gone
$ git reflog show
$ git reflog show flowers
※ Here, 'flowers' is a branch name
-> ★ You can see every single commit 
   Check the hash you want to restore

● Reset back
$ git reset --hard c47ecfc
-> Write the hash you found

$ git log --oneline

★ It works, because every commit stores its parent inside

