※ Git Merge Docs
https://git-scm.com/docs/git-merge

★ Use "GitKraken" to visualize the branches

★ Remember these two Merging Concepts:
1) We merge branches, not specific commits
2) We always merge to the current HEAD branch

▶ Basic Step to Merge
1) Switch to or checkout the branch
   you want to merge the changes into (the receiving branch)
2) Use the "git merge" command to merge changes
   from a specific branch into the current branch

------------------------------------------------------------------------------------------

▶ Fast Forward Merge
Master simply caught up on the commits from the other branch

$ cd Patronus
$ git branch -v
result : * harry  7a2be88 add harry's stag patronus
           lily   1a51cd0 add lily's doe patronus
           master ae321a1 add empty patronus file
$ git switch master
$ git merge harry
result : Updating ae321a1..7a2be88
         Fast-forward
          patronus.txt | 26 ++++++++++++++++++++++++++
          1 file changed, 26 insertions(+)

------------------------------------------------------------------------------------------

▶ Non Fast Forward Merge : git merge <branch-Name>

★ Not All Merges are Fast Forwards!
Imagine one of your teammates merged in a new feature or change to master
while you were working on a branch which is from a previous master version
In such a case, rather than performing a simple fast forward, git performs a "merge commit"

● Create new repository and file 'songs.txt'
$ cd desktop
$ mkdir PlaylistTake2
$ cd PlaylistTake2
$ git init
$ touch songs.txt
$ git add songs.txt
$ git commit -m "add songs file"

● Add some songs to 'songs.txt'
$ git add songs.txt
$ git commit -m "add 2 ABBA songs"

● Create new branch
$ git branch ABBA
$ git switch ABBA

● Add some songs to 'songs.txt'
$ git commit -a -m "add Mammamia"

● Add some songs to 'songs.txt'
$ git commit -a -m "add dancing queen"

● Go back to master branch
$ git switch master

● Create new file 'podcasts.txt'
$ touch podcasts.txt
$ git add podcasts.txt
$ git commit -m "add podcasts file"
-> Now master branch has new file
   which ABBA branch does not know about

● Add some radio program to 'podcasts.txt'
$ git add podcasts.txt
$ git commit -m "add 3 podcasts"

● Merge
$ git merge ABBA
result : hint: Waiting for your editor to close the file...
-> It opens visual studio code
-> Just close the file
-> Check 'GitKraken' whether master and ABBA branches are merged

------------------------------------------------------------------------------------------

▶ Resolve Merge Conflicts

★ Heads Up!
Depending on the specific changes your are trying to merge,
Git may not be able to automatically merge.
This results in merge conflicts, which you need to manually resolve.

Whenever you encounter merge conflicts, follow these steps to resolve them:
1) Open up the file(s) with merge conflicts
2) Edit the file(s) to remove the conflicts
   Decide which branch's content you want to keep in each conflict
   Or keep the content from both
3) Remove the conflict "markers" in the document
4) Add your changes and then make a commit!

$ git branch -d ABBA
-> Now we have only master branch

● Create new branch 'serena', 'bjorn'
$ git switch -c serena
$ git switch master
$ git switch -c bjorn

※ Create new branch code using 'checkout'
$ git checkout -b bjorn

● Edit 'songs.txt' file in 'bjorn' branch
$ git commit -a -m "edited songs"
$ git commit -a -m "add two more songs"

● Edit 'songs.txt' file in 'serena' branch
$ git switch serena
$ git commit -a -m "add one song"
$ git commit -a -m "add one more song"

● Create new branch 'combo' in 'bjorn' branch
$ git switch bjorn
$ git switch -c combo

● Merge 'serena' branch -> CONFLICT! -> Visual Studio Code POP UP
$ git merge serena
result : Auto-merging songs.txt
         CONFLICT (content): Merge conflict in songs.txt
         Automatic merge failed; fix conflicts and then commit the result.

● Screen of Visual Studio Code
<<<<<<< HEAD
Dancing Queen
King Gizzard & The Lizard Wizard
Strokes1
Strokes2
=======
ABC - ABBA
ONE OF US - ABBA
Mammamia
Dancing Queen
Give it to me
Dolly Parton
>>>>>>> serena

Method1) Edit Manually
Delete things you don't want to merge manually
This time, we would use all of them
So, we just need to delete "<<<HEAD", "===", ">>>serena" as below:

Dancing Queen
King Gizzard & The Lizard Wizard
Strokes1
Strokes2
ABC - ABBA
ONE OF US - ABBA
Mammamia
Dancing Queen
Give it to me
Dolly Parton

Method2) Click one of them
- Accept Current Change
- Accept Incoming Change
- Accept Both Changes
- Compare Changes

※ You can edit (add or delete) things in the file freely!

● Add your changes and then make a commit!
$ git status
result : On branch combo
         You have unmerged paths.
           (fix conflicts and run "git commit")
           (use "git merge --abort" to abort the merge)
         
         Unmerged paths:
           (use "git add <file>..." to mark resolution)
                 both modified:   songs.txt

         no changes added to commit (use "git add" and/or "git commit -a")

$ git add .
$ git commit -m "resolve conflicts"

------------------------------------------------------------------------------------------

▶ Merging Basics Exercise
※ https://www.notion.so/Git-Merging-Exercise-0236a17f04c847159a38f5efa978ce2c

$ mkdir desktop/Merging-Exercise
$ cd Merging-Exercise
$ git init
$ touch greetings.txt
$ git add greetings.txt
$ git commit -m "add greetings file"

● Part 1: Fast Forward Merge
Your goal is to generate a fast forward merge

$ git switch -c spanish
$ code .

Edit 'greetings.txt' file in 'spanish' branch
$ git add greetings.txt
$ git commit -m "add spanish greeting"

$ git switch master
$ git merge spanish
result : Updating 3c87a5f..280f217
         Fast-forward
          greetings.txt | 1 +
          1 file changed, 1 insertion(+)

● Part 2: Merge Commit (No Conflicts)
Your goal is to generate a merge commit with NO MERGE CONFLICTS

$ git switch -c french

Edit 'greetings.txt' file in 'french' branch
$ git add greetings.txt
$ git commit -m "add french greeting"

Add new file 'goodbye.txt' file in 'master' branch
$ git switch master
$ git add goodbye.txt
$ git commit -m "add goodbye file"

$ git merge french
result : Merge made by the 'recursive' strategy.
          greetings.txt | 3 ++-
          1 file changed, 2 insertions(+), 1 deletion(-)

$ git log --oneline
result : d0115c6 (HEAD -> master) Merge branch 'french'
         63bd2a3 add goodbye file
         7826b32 (french) add french greeting
         280f217 (spanish) add spanish greeting
         3c87a5f add greetings file


● Part 3: Conflicts!
Your goal is to generate merge a conflict!

Create new branch 'Korean'
And edit 'greetings.txt' file in 'Korean' branch
$ git switch -c Korean
$ git add greetings.txt
$ git commit -m "add korean greeting"

Edit 'greetings.txt' file in 'master' branch
$ git switch master
$ git add greetings.txt
$ git commit -m "add hello"

$ git merge Korean
result : Auto-merging greetings.txt
         CONFLICT (content): Merge conflict in greetings.txt
         Automatic merge failed; fix conflicts and then commit the result.

Click 'Accept both changes' in VSCode

$ git status
result : On branch master
         You have unmerged paths.
           (fix conflicts and run "git commit")
           (use "git merge --abort" to abort the merge)

         Unmerged paths:
           (use "git add <file>..." to mark resolution)
                 both modified:   greetings.txt

         no changes added to commit (use "git add" and/or "git commit -a")

$ git add greetings.txt
$ git commit -m "resolve conflicts"

$ git log --oneline
result : 7ea7813 (HEAD -> master) resolve conflicts
         c589422 add hello
         16ad067 (Korean) add korean greeting
         d0115c6 Merge branch 'french'
         63bd2a3 add goodbye file
         7826b32 (french) add french greeting
         280f217 (spanish) add spanish greeting
         3c87a5f add greetings file

